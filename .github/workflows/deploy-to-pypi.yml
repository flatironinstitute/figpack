name: Deploy to PyPI

on:
  workflow_dispatch:
  push:
    paths:
      - "figpack/__init__.py"
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ["3.11"]

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: figpack-gui/package-lock.json

      - name: Install GUI dependencies and build
        run: |
          cd figpack-gui
          npm ci
          npm run build

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run tests with pytest
        run: |
          pytest --cov=figpack --cov-report=term-missing

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: figpack-gui/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Install GUI dependencies
        run: |
          cd figpack-gui
          npm ci
          npm run build

      - name: Build package
        run: |
          python -m build

      - name: Install package locally
        run: |
          pip install .

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Extract version from installed package
        id: get_version
        run: |
          VERSION=$(python -c "import figpack; print(figpack.__version__)")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.get_version.outputs.version }} -m "Release ${{ steps.get_version.outputs.version }}"
          git push origin ${{ steps.get_version.outputs.version }}
